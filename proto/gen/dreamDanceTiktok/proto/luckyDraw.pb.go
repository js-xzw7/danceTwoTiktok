// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: luckyDraw.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//获取旅行规则（抽奖活动规则）
type LuckyDrawRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyDrawRuleRequest) Reset() {
	*x = LuckyDrawRuleRequest{}
	mi := &file_luckyDraw_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyDrawRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDrawRuleRequest) ProtoMessage() {}

func (x *LuckyDrawRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDrawRuleRequest.ProtoReflect.Descriptor instead.
func (*LuckyDrawRuleRequest) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{0}
}

type LuckyDrawRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DrawRule      []*DrawRuleItem        `protobuf:"bytes,1,rep,name=DrawRule,proto3" json:"DrawRule,omitempty"` //
	DrawShow      []*DrawShowItem        `protobuf:"bytes,2,rep,name=DrawShow,proto3" json:"DrawShow,omitempty"` //
	StartTime     int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyDrawRuleResponse) Reset() {
	*x = LuckyDrawRuleResponse{}
	mi := &file_luckyDraw_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyDrawRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDrawRuleResponse) ProtoMessage() {}

func (x *LuckyDrawRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDrawRuleResponse.ProtoReflect.Descriptor instead.
func (*LuckyDrawRuleResponse) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{1}
}

func (x *LuckyDrawRuleResponse) GetDrawRule() []*DrawRuleItem {
	if x != nil {
		return x.DrawRule
	}
	return nil
}

func (x *LuckyDrawRuleResponse) GetDrawShow() []*DrawShowItem {
	if x != nil {
		return x.DrawShow
	}
	return nil
}

func (x *LuckyDrawRuleResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *LuckyDrawRuleResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

//message DrawRuleItem {
//  int64 element_no = 1; //散件编号
//  int32 element_number = 2; //散件数量
//  int32 element_give_number = 3; //赠送数量
//}
type DrawRuleItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	//  int64 element_no = 1; //散件编号
	Number        int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`                           //抽奖数量
	GiveNumber    int32 `protobuf:"varint,2,opt,name=give_number,json=giveNumber,proto3" json:"give_number,omitempty"` //赠送数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawRuleItem) Reset() {
	*x = DrawRuleItem{}
	mi := &file_luckyDraw_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawRuleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawRuleItem) ProtoMessage() {}

func (x *DrawRuleItem) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawRuleItem.ProtoReflect.Descriptor instead.
func (*DrawRuleItem) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{2}
}

func (x *DrawRuleItem) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DrawRuleItem) GetGiveNumber() int32 {
	if x != nil {
		return x.GiveNumber
	}
	return 0
}

type DrawShowItem struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DrawType          int32                  `protobuf:"varint,1,opt,name=draw_type,json=drawType,proto3" json:"draw_type,omitempty"`                           //1:道具;2:星光值
	ElementNo         int64                  `protobuf:"varint,2,opt,name=element_no,json=elementNo,proto3" json:"element_no,omitempty"`                        //散件编号
	ElementProportion string                 `protobuf:"bytes,3,opt,name=element_proportion,json=elementProportion,proto3" json:"element_proportion,omitempty"` //百分比的值，
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DrawShowItem) Reset() {
	*x = DrawShowItem{}
	mi := &file_luckyDraw_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawShowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawShowItem) ProtoMessage() {}

func (x *DrawShowItem) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawShowItem.ProtoReflect.Descriptor instead.
func (*DrawShowItem) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{3}
}

func (x *DrawShowItem) GetDrawType() int32 {
	if x != nil {
		return x.DrawType
	}
	return 0
}

func (x *DrawShowItem) GetElementNo() int64 {
	if x != nil {
		return x.ElementNo
	}
	return 0
}

func (x *DrawShowItem) GetElementProportion() string {
	if x != nil {
		return x.ElementProportion
	}
	return ""
}

//根据元素id批量获取元素详情
type ElementInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ElementNos    []int64                `protobuf:"varint,1,rep,packed,name=element_nos,json=elementNos,proto3" json:"element_nos,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementInfoRequest) Reset() {
	*x = ElementInfoRequest{}
	mi := &file_luckyDraw_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementInfoRequest) ProtoMessage() {}

func (x *ElementInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementInfoRequest.ProtoReflect.Descriptor instead.
func (*ElementInfoRequest) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{4}
}

func (x *ElementInfoRequest) GetElementNos() []int64 {
	if x != nil {
		return x.ElementNos
	}
	return nil
}

//获取排名前多少的用户
type ElementInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*ElementInfoItem     `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementInfoResponse) Reset() {
	*x = ElementInfoResponse{}
	mi := &file_luckyDraw_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementInfoResponse) ProtoMessage() {}

func (x *ElementInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementInfoResponse.ProtoReflect.Descriptor instead.
func (*ElementInfoResponse) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{5}
}

func (x *ElementInfoResponse) GetList() []*ElementInfoItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ElementInfoItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ElementNo     int64                  `protobuf:"varint,1,opt,name=element_no,json=elementNo,proto3" json:"element_no,omitempty"` //元素编号编号
	Icon          string                 `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`                             //元素图片
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                             //元素名字
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementInfoItem) Reset() {
	*x = ElementInfoItem{}
	mi := &file_luckyDraw_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementInfoItem) ProtoMessage() {}

func (x *ElementInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementInfoItem.ProtoReflect.Descriptor instead.
func (*ElementInfoItem) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{6}
}

func (x *ElementInfoItem) GetElementNo() int64 {
	if x != nil {
		return x.ElementNo
	}
	return 0
}

func (x *ElementInfoItem) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ElementInfoItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//幸运记录(用户获得的奖品)
type LuckyDrawRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*LuckyDrawRecordItem `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyDrawRecordResponse) Reset() {
	*x = LuckyDrawRecordResponse{}
	mi := &file_luckyDraw_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyDrawRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDrawRecordResponse) ProtoMessage() {}

func (x *LuckyDrawRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDrawRecordResponse.ProtoReflect.Descriptor instead.
func (*LuckyDrawRecordResponse) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{7}
}

func (x *LuckyDrawRecordResponse) GetList() []*LuckyDrawRecordItem {
	if x != nil {
		return x.List
	}
	return nil
}

type LuckyDrawRecordItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户id
	List          []*LuckyDrawDetailItem `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`     //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyDrawRecordItem) Reset() {
	*x = LuckyDrawRecordItem{}
	mi := &file_luckyDraw_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyDrawRecordItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDrawRecordItem) ProtoMessage() {}

func (x *LuckyDrawRecordItem) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDrawRecordItem.ProtoReflect.Descriptor instead.
func (*LuckyDrawRecordItem) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{8}
}

func (x *LuckyDrawRecordItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LuckyDrawRecordItem) GetList() []*LuckyDrawDetailItem {
	if x != nil {
		return x.List
	}
	return nil
}

type LuckyDrawDetailItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DrawType      int32                  `protobuf:"varint,1,opt,name=draw_type,json=drawType,proto3" json:"draw_type,omitempty"`                //1:道具;2:星光值
	ElementNo     int64                  `protobuf:"varint,2,opt,name=element_no,json=elementNo,proto3" json:"element_no,omitempty"`             //元素编号编号
	EffectiveTime int32                  `protobuf:"varint,3,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"` //有效时间，小时为单位
	AddTime       int64                  `protobuf:"varint,4,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`                   //发放时间，秒为单位
	Score         int64                  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`                                      //星光值
	Tag           int32                  `protobuf:"varint,6,opt,name=tag,proto3" json:"tag,omitempty"`                                          //1:s;2:a;3:b;4:c
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyDrawDetailItem) Reset() {
	*x = LuckyDrawDetailItem{}
	mi := &file_luckyDraw_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyDrawDetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyDrawDetailItem) ProtoMessage() {}

func (x *LuckyDrawDetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyDrawDetailItem.ProtoReflect.Descriptor instead.
func (*LuckyDrawDetailItem) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{9}
}

func (x *LuckyDrawDetailItem) GetDrawType() int32 {
	if x != nil {
		return x.DrawType
	}
	return 0
}

func (x *LuckyDrawDetailItem) GetElementNo() int64 {
	if x != nil {
		return x.ElementNo
	}
	return 0
}

func (x *LuckyDrawDetailItem) GetEffectiveTime() int32 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

func (x *LuckyDrawDetailItem) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *LuckyDrawDetailItem) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LuckyDrawDetailItem) GetTag() int32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

//我的道具 （个人背包）
type BagRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BagRequest) Reset() {
	*x = BagRequest{}
	mi := &file_luckyDraw_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagRequest) ProtoMessage() {}

func (x *BagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagRequest.ProtoReflect.Descriptor instead.
func (*BagRequest) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{10}
}

func (x *BagRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BagResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"` //
	List          []*BagItem             `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`     //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BagResponse) Reset() {
	*x = BagResponse{}
	mi := &file_luckyDraw_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagResponse) ProtoMessage() {}

func (x *BagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagResponse.ProtoReflect.Descriptor instead.
func (*BagResponse) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{11}
}

func (x *BagResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BagResponse) GetList() []*BagItem {
	if x != nil {
		return x.List
	}
	return nil
}

type BagItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ElementNo     int64                  `protobuf:"varint,1,opt,name=element_no,json=elementNo,proto3" json:"element_no,omitempty"` //元素编号编号
	EndTime       int64                  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //到期时间，秒为单位
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BagItem) Reset() {
	*x = BagItem{}
	mi := &file_luckyDraw_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BagItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagItem) ProtoMessage() {}

func (x *BagItem) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagItem.ProtoReflect.Descriptor instead.
func (*BagItem) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{12}
}

func (x *BagItem) GetElementNo() int64 {
	if x != nil {
		return x.ElementNo
	}
	return 0
}

func (x *BagItem) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type ElementGiveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ElementNo     []int64                `protobuf:"varint,1,rep,packed,name=element_no,json=elementNo,proto3" json:"element_no,omitempty"` //服饰编号
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //赠送人
	UserIdOther   string                 `protobuf:"bytes,4,opt,name=user_id_other,json=userIdOther,proto3" json:"user_id_other,omitempty"` //收礼人
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementGiveRequest) Reset() {
	*x = ElementGiveRequest{}
	mi := &file_luckyDraw_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementGiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementGiveRequest) ProtoMessage() {}

func (x *ElementGiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementGiveRequest.ProtoReflect.Descriptor instead.
func (*ElementGiveRequest) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{13}
}

func (x *ElementGiveRequest) GetElementNo() []int64 {
	if x != nil {
		return x.ElementNo
	}
	return nil
}

func (x *ElementGiveRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ElementGiveRequest) GetUserIdOther() string {
	if x != nil {
		return x.UserIdOther
	}
	return ""
}

type ElementGiveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`     //
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                         //
	ErrCode       int32                  `protobuf:"varint,3,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"` //错误码不等于0，代表失败，弹出msg;0就是成功
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElementGiveResponse) Reset() {
	*x = ElementGiveResponse{}
	mi := &file_luckyDraw_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementGiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementGiveResponse) ProtoMessage() {}

func (x *ElementGiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementGiveResponse.ProtoReflect.Descriptor instead.
func (*ElementGiveResponse) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{14}
}

func (x *ElementGiveResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ElementGiveResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ElementGiveResponse) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

type UserLuckyDrawRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLuckyDrawRecordRequest) Reset() {
	*x = UserLuckyDrawRecordRequest{}
	mi := &file_luckyDraw_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLuckyDrawRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLuckyDrawRecordRequest) ProtoMessage() {}

func (x *UserLuckyDrawRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLuckyDrawRecordRequest.ProtoReflect.Descriptor instead.
func (*UserLuckyDrawRecordRequest) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{15}
}

func (x *UserLuckyDrawRecordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//查询用户近200条抽奖记录
type UserLuckyDrawRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` //用户id
	List          []*LuckyDrawDetailItem `protobuf:"bytes,2,rep,name=List,proto3" json:"List,omitempty"`     //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLuckyDrawRecordResponse) Reset() {
	*x = UserLuckyDrawRecordResponse{}
	mi := &file_luckyDraw_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLuckyDrawRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLuckyDrawRecordResponse) ProtoMessage() {}

func (x *UserLuckyDrawRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_luckyDraw_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLuckyDrawRecordResponse.ProtoReflect.Descriptor instead.
func (*UserLuckyDrawRecordResponse) Descriptor() ([]byte, []int) {
	return file_luckyDraw_proto_rawDescGZIP(), []int{16}
}

func (x *UserLuckyDrawRecordResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserLuckyDrawRecordResponse) GetList() []*LuckyDrawDetailItem {
	if x != nil {
		return x.List
	}
	return nil
}

var File_luckyDraw_proto protoreflect.FileDescriptor

var file_luckyDraw_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x72, 0x61, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a,
	0x14, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x44, 0x72, 0x61,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x53, 0x68, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x44, 0x72, 0x61, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x79,
	0x0a, 0x0c, 0x44, 0x72, 0x61, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x12, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73,
	0x22, 0x46, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x62, 0x0a, 0x13, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x44, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x44, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x0a, 0x42, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x0b, 0x42, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x07, 0x42, 0x61,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x70, 0x0a, 0x12, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x22, 0x5b, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x34,
	0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x75, 0x63, 0x6b,
	0x79, 0x44, 0x72, 0x61, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x44, 0x72, 0x61, 0x77,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x1c, 0x5a, 0x1a, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_luckyDraw_proto_rawDescOnce sync.Once
	file_luckyDraw_proto_rawDescData = file_luckyDraw_proto_rawDesc
)

func file_luckyDraw_proto_rawDescGZIP() []byte {
	file_luckyDraw_proto_rawDescOnce.Do(func() {
		file_luckyDraw_proto_rawDescData = protoimpl.X.CompressGZIP(file_luckyDraw_proto_rawDescData)
	})
	return file_luckyDraw_proto_rawDescData
}

var file_luckyDraw_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_luckyDraw_proto_goTypes = []any{
	(*LuckyDrawRuleRequest)(nil),        // 0: game.proto.LuckyDrawRuleRequest
	(*LuckyDrawRuleResponse)(nil),       // 1: game.proto.LuckyDrawRuleResponse
	(*DrawRuleItem)(nil),                // 2: game.proto.DrawRuleItem
	(*DrawShowItem)(nil),                // 3: game.proto.DrawShowItem
	(*ElementInfoRequest)(nil),          // 4: game.proto.ElementInfoRequest
	(*ElementInfoResponse)(nil),         // 5: game.proto.ElementInfoResponse
	(*ElementInfoItem)(nil),             // 6: game.proto.ElementInfoItem
	(*LuckyDrawRecordResponse)(nil),     // 7: game.proto.LuckyDrawRecordResponse
	(*LuckyDrawRecordItem)(nil),         // 8: game.proto.LuckyDrawRecordItem
	(*LuckyDrawDetailItem)(nil),         // 9: game.proto.LuckyDrawDetailItem
	(*BagRequest)(nil),                  // 10: game.proto.BagRequest
	(*BagResponse)(nil),                 // 11: game.proto.BagResponse
	(*BagItem)(nil),                     // 12: game.proto.BagItem
	(*ElementGiveRequest)(nil),          // 13: game.proto.ElementGiveRequest
	(*ElementGiveResponse)(nil),         // 14: game.proto.ElementGiveResponse
	(*UserLuckyDrawRecordRequest)(nil),  // 15: game.proto.UserLuckyDrawRecordRequest
	(*UserLuckyDrawRecordResponse)(nil), // 16: game.proto.UserLuckyDrawRecordResponse
}
var file_luckyDraw_proto_depIdxs = []int32{
	2,  // 0: game.proto.LuckyDrawRuleResponse.DrawRule:type_name -> game.proto.DrawRuleItem
	3,  // 1: game.proto.LuckyDrawRuleResponse.DrawShow:type_name -> game.proto.DrawShowItem
	6,  // 2: game.proto.ElementInfoResponse.List:type_name -> game.proto.ElementInfoItem
	8,  // 3: game.proto.LuckyDrawRecordResponse.List:type_name -> game.proto.LuckyDrawRecordItem
	9,  // 4: game.proto.LuckyDrawRecordItem.List:type_name -> game.proto.LuckyDrawDetailItem
	12, // 5: game.proto.BagResponse.List:type_name -> game.proto.BagItem
	9,  // 6: game.proto.UserLuckyDrawRecordResponse.List:type_name -> game.proto.LuckyDrawDetailItem
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_luckyDraw_proto_init() }
func file_luckyDraw_proto_init() {
	if File_luckyDraw_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_luckyDraw_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_luckyDraw_proto_goTypes,
		DependencyIndexes: file_luckyDraw_proto_depIdxs,
		MessageInfos:      file_luckyDraw_proto_msgTypes,
	}.Build()
	File_luckyDraw_proto = out.File
	file_luckyDraw_proto_rawDesc = nil
	file_luckyDraw_proto_goTypes = nil
	file_luckyDraw_proto_depIdxs = nil
}
