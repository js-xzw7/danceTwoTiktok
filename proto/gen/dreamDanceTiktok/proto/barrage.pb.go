// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: barrage.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//----------------------------------------------推玩家--------------------------
type BarragePushUserInItem struct {
	state             protoimpl.MessageState              `protogen:"open.v1"`
	UserId            string                              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                             //玩家id
	OnCamp            int32                               `protobuf:"varint,2,opt,name=on_camp,json=onCamp,proto3" json:"on_camp,omitempty"`                            //所属阵营;1:左方阵营;2:右方阵营
	Nickname          string                              `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                       //昵称
	Avatar            string                              `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                                           //头像
	Sex               int32                               `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`                                                //性别;1:男;2:女
	TotalScore        int64                               `protobuf:"varint,6,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`                //累计积分
	TotalExperience   int64                               `protobuf:"varint,7,opt,name=total_experience,json=totalExperience,proto3" json:"total_experience,omitempty"` //累计经验
	WorldRank         int32                               `protobuf:"varint,8,opt,name=worldRank,proto3" json:"worldRank,omitempty"`
	CurrentElementNos []int64                             `protobuf:"varint,9,rep,packed,name=current_element_nos,json=currentElementNos,proto3" json:"current_element_nos,omitempty"` //nos
	TitleNo           int64                               `protobuf:"varint,10,opt,name=title_no,json=titleNo,proto3" json:"title_no,omitempty"`                                       //标题编号
	CpPlayerUid       string                              `protobuf:"bytes,11,opt,name=cp_player_uid,json=cpPlayerUid,proto3" json:"cp_player_uid,omitempty"`                          // 情侣的ID,对方的用户id
	CpMarriedStatus   int32                               `protobuf:"varint,12,opt,name=cp_married_status,json=cpMarriedStatus,proto3" json:"cp_married_status,omitempty"`             // 0.无任何状态，1：订婚，2：结婚状态
	CpName            string                              `protobuf:"bytes,13,opt,name=cp_name,json=cpName,proto3" json:"cp_name,omitempty"`                                           // 情侣的名字
	CpAvatar          string                              `protobuf:"bytes,14,opt,name=cp_avatar,json=cpAvatar,proto3" json:"cp_avatar,omitempty"`                                     // 情侣对方的头像Icon
	BuffoonScore      int64                               `protobuf:"varint,15,opt,name=buffoon_score,json=buffoonScore,proto3" json:"buffoon_score,omitempty"`                        // 当天当前用户刷的小丑积分
	SoulMates         []*UserInfoItem                     `protobuf:"bytes,16,rep,name=soul_mates,json=soulMates,proto3" json:"soul_mates,omitempty"`                                  //知己
	BestFriends       []*UserInfoItem                     `protobuf:"bytes,17,rep,name=best_friends,json=bestFriends,proto3" json:"best_friends,omitempty"`                            //死党
	PackageDetail     []*PackageItemDetail                `protobuf:"bytes,18,rep,name=package_detail,json=packageDetail,proto3" json:"package_detail,omitempty"`                      //nos
	Friends           []*Friend                           `protobuf:"bytes,19,rep,name=friends,proto3" json:"friends,omitempty"`                                                       //好友列表
	Preset            string                              `protobuf:"bytes,20,opt,name=Preset,proto3" json:"Preset,omitempty"`                                                         //预设
	EmotionsNo        int64                               `protobuf:"varint,21,opt,name=emotions_no,json=emotionsNo,proto3" json:"emotions_no,omitempty"`                              //心情
	Toy               int64                               `protobuf:"varint,22,opt,name=toy,proto3" json:"toy,omitempty"`                                                              // 玩具
	Achievement       []*Achievement                      `protobuf:"bytes,23,rep,name=achievement,proto3" json:"achievement,omitempty"`                                               //成就id
	Badge             []int64                             `protobuf:"varint,24,rep,packed,name=badge,proto3" json:"badge,omitempty"`                                                   //徽章列表
	PetInfo           *BarragePushUserInItemPetInfoItem   `protobuf:"bytes,25,opt,name=petInfo,proto3" json:"petInfo,omitempty"`                                                       // 已经上场的宠物
	PetList           []*BarragePushUserInItemPetInfoItem `protobuf:"bytes,26,rep,name=petList,proto3" json:"petList,omitempty"`                                                       //拥有的宠物
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BarragePushUserInItem) Reset() {
	*x = BarragePushUserInItem{}
	mi := &file_barrage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarragePushUserInItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarragePushUserInItem) ProtoMessage() {}

func (x *BarragePushUserInItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarragePushUserInItem.ProtoReflect.Descriptor instead.
func (*BarragePushUserInItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{0}
}

func (x *BarragePushUserInItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BarragePushUserInItem) GetOnCamp() int32 {
	if x != nil {
		return x.OnCamp
	}
	return 0
}

func (x *BarragePushUserInItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BarragePushUserInItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *BarragePushUserInItem) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *BarragePushUserInItem) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *BarragePushUserInItem) GetTotalExperience() int64 {
	if x != nil {
		return x.TotalExperience
	}
	return 0
}

func (x *BarragePushUserInItem) GetWorldRank() int32 {
	if x != nil {
		return x.WorldRank
	}
	return 0
}

func (x *BarragePushUserInItem) GetCurrentElementNos() []int64 {
	if x != nil {
		return x.CurrentElementNos
	}
	return nil
}

func (x *BarragePushUserInItem) GetTitleNo() int64 {
	if x != nil {
		return x.TitleNo
	}
	return 0
}

func (x *BarragePushUserInItem) GetCpPlayerUid() string {
	if x != nil {
		return x.CpPlayerUid
	}
	return ""
}

func (x *BarragePushUserInItem) GetCpMarriedStatus() int32 {
	if x != nil {
		return x.CpMarriedStatus
	}
	return 0
}

func (x *BarragePushUserInItem) GetCpName() string {
	if x != nil {
		return x.CpName
	}
	return ""
}

func (x *BarragePushUserInItem) GetCpAvatar() string {
	if x != nil {
		return x.CpAvatar
	}
	return ""
}

func (x *BarragePushUserInItem) GetBuffoonScore() int64 {
	if x != nil {
		return x.BuffoonScore
	}
	return 0
}

func (x *BarragePushUserInItem) GetSoulMates() []*UserInfoItem {
	if x != nil {
		return x.SoulMates
	}
	return nil
}

func (x *BarragePushUserInItem) GetBestFriends() []*UserInfoItem {
	if x != nil {
		return x.BestFriends
	}
	return nil
}

func (x *BarragePushUserInItem) GetPackageDetail() []*PackageItemDetail {
	if x != nil {
		return x.PackageDetail
	}
	return nil
}

func (x *BarragePushUserInItem) GetFriends() []*Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *BarragePushUserInItem) GetPreset() string {
	if x != nil {
		return x.Preset
	}
	return ""
}

func (x *BarragePushUserInItem) GetEmotionsNo() int64 {
	if x != nil {
		return x.EmotionsNo
	}
	return 0
}

func (x *BarragePushUserInItem) GetToy() int64 {
	if x != nil {
		return x.Toy
	}
	return 0
}

func (x *BarragePushUserInItem) GetAchievement() []*Achievement {
	if x != nil {
		return x.Achievement
	}
	return nil
}

func (x *BarragePushUserInItem) GetBadge() []int64 {
	if x != nil {
		return x.Badge
	}
	return nil
}

func (x *BarragePushUserInItem) GetPetInfo() *BarragePushUserInItemPetInfoItem {
	if x != nil {
		return x.PetInfo
	}
	return nil
}

func (x *BarragePushUserInItem) GetPetList() []*BarragePushUserInItemPetInfoItem {
	if x != nil {
		return x.PetList
	}
	return nil
}

//成就
type Achievement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AchievementId int64                  `protobuf:"varint,1,opt,name=achievementId,proto3" json:"achievementId,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	mi := &file_barrage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{1}
}

func (x *Achievement) GetAchievementId() int64 {
	if x != nil {
		return x.AchievementId
	}
	return 0
}

func (x *Achievement) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// 好友
type Friend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`           //玩家id
	Nickname      string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`                     //玩家昵称
	Avatar        string                 `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`                         // 玩家头像
	Relationship  int64                  `protobuf:"varint,4,opt,name=relationship,proto3" json:"relationship,omitempty"`            //关系ship;1:关系建立中;2:兄弟;3:姐妹;4:死党;5:闺蜜;6:姐弟;7:兄妹
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Friend) Reset() {
	*x = Friend{}
	mi := &file_barrage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friend) ProtoMessage() {}

func (x *Friend) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friend.ProtoReflect.Descriptor instead.
func (*Friend) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{2}
}

func (x *Friend) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Friend) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Friend) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Friend) GetRelationship() int64 {
	if x != nil {
		return x.Relationship
	}
	return 0
}

func (x *Friend) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

//todo 陈建新：这里数据要加入碎片道具
type PackageItemDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PropNo        int64                  `protobuf:"varint,1,opt,name=prop_no,json=propNo,proto3" json:"prop_no,omitempty"`             //道具编号
	Number        int32                  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`                           //道具数量
	ExpireTime    int64                  `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` // 道具过期时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PackageItemDetail) Reset() {
	*x = PackageItemDetail{}
	mi := &file_barrage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageItemDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageItemDetail) ProtoMessage() {}

func (x *PackageItemDetail) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageItemDetail.ProtoReflect.Descriptor instead.
func (*PackageItemDetail) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{3}
}

func (x *PackageItemDetail) GetPropNo() int64 {
	if x != nil {
		return x.PropNo
	}
	return 0
}

func (x *PackageItemDetail) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PackageItemDetail) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type UserInfoItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //玩家id
	Nickname      string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`           //玩家昵称
	Avatar        string                 `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`               // 玩家头像
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfoItem) Reset() {
	*x = UserInfoItem{}
	mi := &file_barrage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoItem) ProtoMessage() {}

func (x *UserInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoItem.ProtoReflect.Descriptor instead.
func (*UserInfoItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{4}
}

func (x *UserInfoItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfoItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfoItem) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

//----------------------------------------------推礼物--------------------------
type BarragePushGiftItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`              //玩家id
	GiftNumber    int32                  `protobuf:"varint,2,opt,name=gift_number,json=giftNumber,proto3" json:"gift_number,omitempty"` //礼物数量
	GiftCode      string                 `protobuf:"bytes,3,opt,name=gift_code,json=giftCode,proto3" json:"gift_code,omitempty"`        //礼物编码编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BarragePushGiftItem) Reset() {
	*x = BarragePushGiftItem{}
	mi := &file_barrage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarragePushGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarragePushGiftItem) ProtoMessage() {}

func (x *BarragePushGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarragePushGiftItem.ProtoReflect.Descriptor instead.
func (*BarragePushGiftItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{5}
}

func (x *BarragePushGiftItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BarragePushGiftItem) GetGiftNumber() int32 {
	if x != nil {
		return x.GiftNumber
	}
	return 0
}

func (x *BarragePushGiftItem) GetGiftCode() string {
	if x != nil {
		return x.GiftCode
	}
	return ""
}

//----------------------------------------------推特殊内容--------------------------
type BarragePushContentItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`             //玩家id
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //礼物编码编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BarragePushContentItem) Reset() {
	*x = BarragePushContentItem{}
	mi := &file_barrage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarragePushContentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarragePushContentItem) ProtoMessage() {}

func (x *BarragePushContentItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarragePushContentItem.ProtoReflect.Descriptor instead.
func (*BarragePushContentItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{6}
}

func (x *BarragePushContentItem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *BarragePushContentItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//----------------------------------------------推点赞--------------------------
type BarragePushLikeItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LikeNum       string                 `protobuf:"bytes,1,opt,name=like_num,json=likeNum,proto3" json:"like_num,omitempty"` //玩家id
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    //礼物编码编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BarragePushLikeItem) Reset() {
	*x = BarragePushLikeItem{}
	mi := &file_barrage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarragePushLikeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarragePushLikeItem) ProtoMessage() {}

func (x *BarragePushLikeItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarragePushLikeItem.ProtoReflect.Descriptor instead.
func (*BarragePushLikeItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{7}
}

func (x *BarragePushLikeItem) GetLikeNum() string {
	if x != nil {
		return x.LikeNum
	}
	return ""
}

func (x *BarragePushLikeItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//----------------------------------------------推点赞--------------------------
type BarrageChangeSexItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`             //换性别内容
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` //礼物编码编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BarrageChangeSexItem) Reset() {
	*x = BarrageChangeSexItem{}
	mi := &file_barrage_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarrageChangeSexItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrageChangeSexItem) ProtoMessage() {}

func (x *BarrageChangeSexItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrageChangeSexItem.ProtoReflect.Descriptor instead.
func (*BarrageChangeSexItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{8}
}

func (x *BarrageChangeSexItem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *BarrageChangeSexItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

//----------------------------------------------推艾特的--------------------------
type BarrageTipsItem struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InitiativeNickname string                 `protobuf:"bytes,1,opt,name=initiative_nickname,json=initiativeNickname,proto3" json:"initiative_nickname,omitempty"` //主动@的人
	PassiveNickname    string                 `protobuf:"bytes,2,opt,name=passive_nickname,json=passiveNickname,proto3" json:"passive_nickname,omitempty"`          //被@的人
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BarrageTipsItem) Reset() {
	*x = BarrageTipsItem{}
	mi := &file_barrage_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarrageTipsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrageTipsItem) ProtoMessage() {}

func (x *BarrageTipsItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrageTipsItem.ProtoReflect.Descriptor instead.
func (*BarrageTipsItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{9}
}

func (x *BarrageTipsItem) GetInitiativeNickname() string {
	if x != nil {
		return x.InitiativeNickname
	}
	return ""
}

func (x *BarrageTipsItem) GetPassiveNickname() string {
	if x != nil {
		return x.PassiveNickname
	}
	return ""
}

//----------------------------------------------影响的--------------------------
type SpecialEffectsItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UidId            string                 `protobuf:"bytes,1,opt,name=uid_id,json=uidId,proto3" json:"uid_id,omitempty"`                                            //用户id
	SpecialEffectsId []int64                `protobuf:"varint,2,rep,packed,name=special_effects_id,json=specialEffectsId,proto3" json:"special_effects_id,omitempty"` //特效id数组
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SpecialEffectsItem) Reset() {
	*x = SpecialEffectsItem{}
	mi := &file_barrage_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecialEffectsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialEffectsItem) ProtoMessage() {}

func (x *SpecialEffectsItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialEffectsItem.ProtoReflect.Descriptor instead.
func (*SpecialEffectsItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{10}
}

func (x *SpecialEffectsItem) GetUidId() string {
	if x != nil {
		return x.UidId
	}
	return ""
}

func (x *SpecialEffectsItem) GetSpecialEffectsId() []int64 {
	if x != nil {
		return x.SpecialEffectsId
	}
	return nil
}

type NewSpecialEffectsItem struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UidId             string                 `protobuf:"bytes,1,opt,name=uid_id,json=uidId,proto3" json:"uid_id,omitempty"`                                        //用户id
	SpecialEffectsId  int64                  `protobuf:"varint,2,opt,name=special_effects_id,json=specialEffectsId,proto3" json:"special_effects_id,omitempty"`    //特效id
	SpecialEffectsNum int64                  `protobuf:"varint,3,opt,name=special_effects_num,json=specialEffectsNum,proto3" json:"special_effects_num,omitempty"` //特效数量
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NewSpecialEffectsItem) Reset() {
	*x = NewSpecialEffectsItem{}
	mi := &file_barrage_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewSpecialEffectsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSpecialEffectsItem) ProtoMessage() {}

func (x *NewSpecialEffectsItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSpecialEffectsItem.ProtoReflect.Descriptor instead.
func (*NewSpecialEffectsItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{11}
}

func (x *NewSpecialEffectsItem) GetUidId() string {
	if x != nil {
		return x.UidId
	}
	return ""
}

func (x *NewSpecialEffectsItem) GetSpecialEffectsId() int64 {
	if x != nil {
		return x.SpecialEffectsId
	}
	return 0
}

func (x *NewSpecialEffectsItem) GetSpecialEffectsNum() int64 {
	if x != nil {
		return x.SpecialEffectsNum
	}
	return 0
}

type CpSpecialEffectsResponse struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	SpecialEffectsItems []*CpSpecialEffectsItem `protobuf:"bytes,1,rep,name=SpecialEffectsItems,proto3" json:"SpecialEffectsItems,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CpSpecialEffectsResponse) Reset() {
	*x = CpSpecialEffectsResponse{}
	mi := &file_barrage_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpSpecialEffectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpSpecialEffectsResponse) ProtoMessage() {}

func (x *CpSpecialEffectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpSpecialEffectsResponse.ProtoReflect.Descriptor instead.
func (*CpSpecialEffectsResponse) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{12}
}

func (x *CpSpecialEffectsResponse) GetSpecialEffectsItems() []*CpSpecialEffectsItem {
	if x != nil {
		return x.SpecialEffectsItems
	}
	return nil
}

type CpSpecialEffectsItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户id
	UserIdOther   string                 `protobuf:"bytes,2,opt,name=user_id_other,json=userIdOther,proto3" json:"user_id_other,omitempty"` //用户id
	EffectsId     int64                  `protobuf:"varint,3,opt,name=effects_id,json=effectsId,proto3" json:"effects_id,omitempty"`        //特效id
	EffectsNum    int64                  `protobuf:"varint,4,opt,name=effects_num,json=effectsNum,proto3" json:"effects_num,omitempty"`     //特效数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpSpecialEffectsItem) Reset() {
	*x = CpSpecialEffectsItem{}
	mi := &file_barrage_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpSpecialEffectsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpSpecialEffectsItem) ProtoMessage() {}

func (x *CpSpecialEffectsItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpSpecialEffectsItem.ProtoReflect.Descriptor instead.
func (*CpSpecialEffectsItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{13}
}

func (x *CpSpecialEffectsItem) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CpSpecialEffectsItem) GetUserIdOther() string {
	if x != nil {
		return x.UserIdOther
	}
	return ""
}

func (x *CpSpecialEffectsItem) GetEffectsId() int64 {
	if x != nil {
		return x.EffectsId
	}
	return 0
}

func (x *CpSpecialEffectsItem) GetEffectsNum() int64 {
	if x != nil {
		return x.EffectsNum
	}
	return 0
}

type FullServiceUsers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`       //用户名称
	UserAvatar    string                 `protobuf:"bytes,2,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"` //用户头像
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullServiceUsers) Reset() {
	*x = FullServiceUsers{}
	mi := &file_barrage_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullServiceUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullServiceUsers) ProtoMessage() {}

func (x *FullServiceUsers) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullServiceUsers.ProtoReflect.Descriptor instead.
func (*FullServiceUsers) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{14}
}

func (x *FullServiceUsers) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *FullServiceUsers) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

type FullServiceUsersCp struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserIdLeft      string                 `protobuf:"bytes,1,opt,name=user_id_left,json=userIdLeft,proto3" json:"user_id_left,omitempty"`                 //送礼人
	UserNameLeft    string                 `protobuf:"bytes,2,opt,name=user_name_left,json=userNameLeft,proto3" json:"user_name_left,omitempty"`           //送礼人
	UserAvatarLeft  string                 `protobuf:"bytes,3,opt,name=user_avatar_left,json=userAvatarLeft,proto3" json:"user_avatar_left,omitempty"`     //送礼人头像
	UserIdRight     string                 `protobuf:"bytes,4,opt,name=user_id_right,json=userIdRight,proto3" json:"user_id_right,omitempty"`              //蹭礼物的人
	UserNameRight   string                 `protobuf:"bytes,5,opt,name=user_name_right,json=userNameRight,proto3" json:"user_name_right,omitempty"`        //蹭礼物的
	UserAvatarRight string                 `protobuf:"bytes,6,opt,name=user_avatar_right,json=userAvatarRight,proto3" json:"user_avatar_right,omitempty"`  //蹭礼物的头像
	PropsNo         int64                  `protobuf:"varint,7,opt,name=props_no,json=propsNo,proto3" json:"props_no,omitempty"`                           //道具编号
	PropsExpireTime int64                  `protobuf:"varint,8,opt,name=props_expire_time,json=propsExpireTime,proto3" json:"props_expire_time,omitempty"` //道具有效期
	PropsNumber     int32                  `protobuf:"varint,9,opt,name=props_number,json=propsNumber,proto3" json:"props_number,omitempty"`               //道具数量
	DrawType        int32                  `protobuf:"varint,10,opt,name=draw_type,json=drawType,proto3" json:"draw_type,omitempty"`                       //1.道具 2.星光值
	Score           int64                  `protobuf:"varint,11,opt,name=score,proto3" json:"score,omitempty"`                                             //星光值分数
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FullServiceUsersCp) Reset() {
	*x = FullServiceUsersCp{}
	mi := &file_barrage_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullServiceUsersCp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullServiceUsersCp) ProtoMessage() {}

func (x *FullServiceUsersCp) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullServiceUsersCp.ProtoReflect.Descriptor instead.
func (*FullServiceUsersCp) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{15}
}

func (x *FullServiceUsersCp) GetUserIdLeft() string {
	if x != nil {
		return x.UserIdLeft
	}
	return ""
}

func (x *FullServiceUsersCp) GetUserNameLeft() string {
	if x != nil {
		return x.UserNameLeft
	}
	return ""
}

func (x *FullServiceUsersCp) GetUserAvatarLeft() string {
	if x != nil {
		return x.UserAvatarLeft
	}
	return ""
}

func (x *FullServiceUsersCp) GetUserIdRight() string {
	if x != nil {
		return x.UserIdRight
	}
	return ""
}

func (x *FullServiceUsersCp) GetUserNameRight() string {
	if x != nil {
		return x.UserNameRight
	}
	return ""
}

func (x *FullServiceUsersCp) GetUserAvatarRight() string {
	if x != nil {
		return x.UserAvatarRight
	}
	return ""
}

func (x *FullServiceUsersCp) GetPropsNo() int64 {
	if x != nil {
		return x.PropsNo
	}
	return 0
}

func (x *FullServiceUsersCp) GetPropsExpireTime() int64 {
	if x != nil {
		return x.PropsExpireTime
	}
	return 0
}

func (x *FullServiceUsersCp) GetPropsNumber() int32 {
	if x != nil {
		return x.PropsNumber
	}
	return 0
}

func (x *FullServiceUsersCp) GetDrawType() int32 {
	if x != nil {
		return x.DrawType
	}
	return 0
}

func (x *FullServiceUsersCp) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

//----------------------------------------------汇总--------------------------
//推礼物数据,1秒钟1次
type BarrageResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	ListUser      []*BarragePushUserInItem  `protobuf:"bytes,1,rep,name=listUser,proto3" json:"listUser,omitempty"`               //用户列表
	ListGift      []*BarragePushGiftItem    `protobuf:"bytes,2,rep,name=listGift,proto3" json:"listGift,omitempty"`               //礼物列表
	ListContent   []*BarragePushContentItem `protobuf:"bytes,3,rep,name=listContent,proto3" json:"listContent,omitempty"`         //评论列表
	ListLike      []*BarragePushLikeItem    `protobuf:"bytes,4,rep,name=listLike,proto3" json:"listLike,omitempty"`               //点赞列表
	ListChangeSex []*BarrageChangeSexItem   `protobuf:"bytes,5,rep,name=listChangeSex,proto3" json:"listChangeSex,omitempty"`     //改变性别
	ListRight     []string                  `protobuf:"bytes,6,rep,name=listRight,proto3" json:"listRight,omitempty"`             //
	ListError     []string                  `protobuf:"bytes,7,rep,name=listError,proto3" json:"listError,omitempty"`             //
	RoundId       int64                     `protobuf:"varint,8,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"` //回合id
	//  repeated string listChangeClothGroup = 9; //换个人衣服的套装的用户id  //「hxx」-换专属服装
	IndividualPoolSuitIds           []*IndividualPoolSuitIdItem `protobuf:"bytes,9,rep,name=individual_pool_suit_ids,json=individualPoolSuitIds,proto3" json:"individual_pool_suit_ids,omitempty"` //个人池的专属套装
	ListChangeWing                  []string                    `protobuf:"bytes,10,rep,name=listChangeWing,proto3" json:"listChangeWing,omitempty"`                                               //换翅膀的用户id   //「hyy」-换翅膀
	ListTips                        []*BarrageTipsItem          `protobuf:"bytes,11,rep,name=listTips,proto3" json:"listTips,omitempty"`                                                           //
	ListChangeClothCommon           []string                    `protobuf:"bytes,12,rep,name=listChangeClothCommon,proto3" json:"listChangeClothCommon,omitempty"`                                 //换个人衣服的套装的用户id 「h」-换公公池套装
	SpecialEffectsItems             []*SpecialEffectsItem       `protobuf:"bytes,13,rep,name=specialEffectsItems,proto3" json:"specialEffectsItems,omitempty"`                                     //用户特效
	FullServiceUserIds              []*FullServiceUsers         `protobuf:"bytes,14,rep,name=fullServiceUserIds,proto3" json:"fullServiceUserIds,omitempty"`                                       //全服喇叭单人
	ListActivitiesGroup             []string                    `protobuf:"bytes,15,rep,name=listActivitiesGroup,proto3" json:"listActivitiesGroup,omitempty"`                                     //换活动套装的用户id  //「hcc」-换专属服装
	ListComposeGroup                []string                    `protobuf:"bytes,16,rep,name=listComposeGroup,proto3" json:"listComposeGroup,omitempty"`                                           //组合套装列表  //「hcp」-换专属服装
	ListExclusiveComposeGroup       []string                    `protobuf:"bytes,17,rep,name=listExclusiveComposeGroup,proto3" json:"listExclusiveComposeGroup,omitempty"`                         //换专属组合套装得用户列表  //「hww」-换情侣服装
	ListComposeDisband              []string                    `protobuf:"bytes,18,rep,name=listComposeDisband,proto3" json:"listComposeDisband,omitempty"`                                       //换专属组合套装得用户列表  //「hww」-换情侣服装
	ModelId                         int64                       `protobuf:"varint,19,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`                                             //回合id
	ListUserChangeHalo              []string                    `protobuf:"bytes,20,rep,name=listUserChangeHalo,proto3" json:"listUserChangeHalo,omitempty"`                                       //套装得用户列表  //「hzz」-换光环
	FullServiceUserIdsCp            []*FullServiceUsersCp       `protobuf:"bytes,21,rep,name=fullServiceUserIdsCp,proto3" json:"fullServiceUserIdsCp,omitempty"`                                   //全服喇叭cp
	FullServiceUserIdsMarry         []*FullServiceUsersCp       `protobuf:"bytes,22,rep,name=fullServiceUserIdsMarry,proto3" json:"fullServiceUserIdsMarry,omitempty"`                             //全服喇叭结婚成功
	FullServiceUserIdsSoulMate      []*FullServiceUsersCp       `protobuf:"bytes,23,rep,name=fullServiceUserIdsSoulMate,proto3" json:"fullServiceUserIdsSoulMate,omitempty"`                       //知己喇叭
	FullServiceUserIdsBestFriends   []*FullServiceUsersCp       `protobuf:"bytes,24,rep,name=fullServiceUserIdsBestFriends,proto3" json:"fullServiceUserIdsBestFriends,omitempty"`                 //死党喇叭
	FullServiceUserIdsFriends       []*FullServiceUsersCp       `protobuf:"bytes,25,rep,name=fullServiceUserIdsFriends,proto3" json:"fullServiceUserIdsFriends,omitempty"`                         //新的朋友喇叭
	FullServiceUserIdsOrderMarryNew []*FullServiceUsersCp       `protobuf:"bytes,26,rep,name=fullServiceUserIdsOrderMarryNew,proto3" json:"fullServiceUserIdsOrderMarryNew,omitempty"`             //全服喇叭订婚成功
	FullServiceUserIdsDrawPrize     []*FullServiceUsersCp       `protobuf:"bytes,27,rep,name=fullServiceUserIdsDrawPrize,proto3" json:"fullServiceUserIdsDrawPrize,omitempty"`                     //抽金全服飘窗
	NewSpecialEffectsItems          []*NewSpecialEffectsItem    `protobuf:"bytes,28,rep,name=newSpecialEffectsItems,proto3" json:"newSpecialEffectsItems,omitempty"`                               //新用户特效
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *BarrageResponse) Reset() {
	*x = BarrageResponse{}
	mi := &file_barrage_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarrageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrageResponse) ProtoMessage() {}

func (x *BarrageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrageResponse.ProtoReflect.Descriptor instead.
func (*BarrageResponse) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{16}
}

func (x *BarrageResponse) GetListUser() []*BarragePushUserInItem {
	if x != nil {
		return x.ListUser
	}
	return nil
}

func (x *BarrageResponse) GetListGift() []*BarragePushGiftItem {
	if x != nil {
		return x.ListGift
	}
	return nil
}

func (x *BarrageResponse) GetListContent() []*BarragePushContentItem {
	if x != nil {
		return x.ListContent
	}
	return nil
}

func (x *BarrageResponse) GetListLike() []*BarragePushLikeItem {
	if x != nil {
		return x.ListLike
	}
	return nil
}

func (x *BarrageResponse) GetListChangeSex() []*BarrageChangeSexItem {
	if x != nil {
		return x.ListChangeSex
	}
	return nil
}

func (x *BarrageResponse) GetListRight() []string {
	if x != nil {
		return x.ListRight
	}
	return nil
}

func (x *BarrageResponse) GetListError() []string {
	if x != nil {
		return x.ListError
	}
	return nil
}

func (x *BarrageResponse) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *BarrageResponse) GetIndividualPoolSuitIds() []*IndividualPoolSuitIdItem {
	if x != nil {
		return x.IndividualPoolSuitIds
	}
	return nil
}

func (x *BarrageResponse) GetListChangeWing() []string {
	if x != nil {
		return x.ListChangeWing
	}
	return nil
}

func (x *BarrageResponse) GetListTips() []*BarrageTipsItem {
	if x != nil {
		return x.ListTips
	}
	return nil
}

func (x *BarrageResponse) GetListChangeClothCommon() []string {
	if x != nil {
		return x.ListChangeClothCommon
	}
	return nil
}

func (x *BarrageResponse) GetSpecialEffectsItems() []*SpecialEffectsItem {
	if x != nil {
		return x.SpecialEffectsItems
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIds() []*FullServiceUsers {
	if x != nil {
		return x.FullServiceUserIds
	}
	return nil
}

func (x *BarrageResponse) GetListActivitiesGroup() []string {
	if x != nil {
		return x.ListActivitiesGroup
	}
	return nil
}

func (x *BarrageResponse) GetListComposeGroup() []string {
	if x != nil {
		return x.ListComposeGroup
	}
	return nil
}

func (x *BarrageResponse) GetListExclusiveComposeGroup() []string {
	if x != nil {
		return x.ListExclusiveComposeGroup
	}
	return nil
}

func (x *BarrageResponse) GetListComposeDisband() []string {
	if x != nil {
		return x.ListComposeDisband
	}
	return nil
}

func (x *BarrageResponse) GetModelId() int64 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *BarrageResponse) GetListUserChangeHalo() []string {
	if x != nil {
		return x.ListUserChangeHalo
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIdsCp() []*FullServiceUsersCp {
	if x != nil {
		return x.FullServiceUserIdsCp
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIdsMarry() []*FullServiceUsersCp {
	if x != nil {
		return x.FullServiceUserIdsMarry
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIdsSoulMate() []*FullServiceUsersCp {
	if x != nil {
		return x.FullServiceUserIdsSoulMate
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIdsBestFriends() []*FullServiceUsersCp {
	if x != nil {
		return x.FullServiceUserIdsBestFriends
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIdsFriends() []*FullServiceUsersCp {
	if x != nil {
		return x.FullServiceUserIdsFriends
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIdsOrderMarryNew() []*FullServiceUsersCp {
	if x != nil {
		return x.FullServiceUserIdsOrderMarryNew
	}
	return nil
}

func (x *BarrageResponse) GetFullServiceUserIdsDrawPrize() []*FullServiceUsersCp {
	if x != nil {
		return x.FullServiceUserIdsDrawPrize
	}
	return nil
}

func (x *BarrageResponse) GetNewSpecialEffectsItems() []*NewSpecialEffectsItem {
	if x != nil {
		return x.NewSpecialEffectsItems
	}
	return nil
}

type IndividualPoolSuitIdItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SuitId        int64                  `protobuf:"varint,1,opt,name=suit_id,json=suitId,proto3" json:"suit_id,omitempty"`             //套装ID
	ExpireTime    int64                  `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` // 道具过期时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndividualPoolSuitIdItem) Reset() {
	*x = IndividualPoolSuitIdItem{}
	mi := &file_barrage_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndividualPoolSuitIdItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndividualPoolSuitIdItem) ProtoMessage() {}

func (x *IndividualPoolSuitIdItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndividualPoolSuitIdItem.ProtoReflect.Descriptor instead.
func (*IndividualPoolSuitIdItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{17}
}

func (x *IndividualPoolSuitIdItem) GetSuitId() int64 {
	if x != nil {
		return x.SuitId
	}
	return 0
}

func (x *IndividualPoolSuitIdItem) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type BarragePushUserInItemPetInfoItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PetName       string                 `protobuf:"bytes,1,opt,name=petName,proto3" json:"petName,omitempty"`          // 宠物名
	PetNo         string                 `protobuf:"bytes,2,opt,name=petNo,proto3" json:"petNo,omitempty"`              // 宠物编号
	PetId         string                 `protobuf:"bytes,3,opt,name=petId,proto3" json:"petId,omitempty"`              // 宠物id
	PetElement    string                 `protobuf:"bytes,4,opt,name=petElement,proto3" json:"petElement,omitempty"`    // 宠物穿戴装备
	PetStatus     int64                  `protobuf:"varint,5,opt,name=petStatus,proto3" json:"petStatus,omitempty"`     //宠物状态 1:学习 2:打工
	ToDoEndTime   int64                  `protobuf:"varint,6,opt,name=toDoEndTime,proto3" json:"toDoEndTime,omitempty"` //干活结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BarragePushUserInItemPetInfoItem) Reset() {
	*x = BarragePushUserInItemPetInfoItem{}
	mi := &file_barrage_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarragePushUserInItemPetInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarragePushUserInItemPetInfoItem) ProtoMessage() {}

func (x *BarragePushUserInItemPetInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_barrage_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarragePushUserInItemPetInfoItem.ProtoReflect.Descriptor instead.
func (*BarragePushUserInItemPetInfoItem) Descriptor() ([]byte, []int) {
	return file_barrage_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BarragePushUserInItemPetInfoItem) GetPetName() string {
	if x != nil {
		return x.PetName
	}
	return ""
}

func (x *BarragePushUserInItemPetInfoItem) GetPetNo() string {
	if x != nil {
		return x.PetNo
	}
	return ""
}

func (x *BarragePushUserInItemPetInfoItem) GetPetId() string {
	if x != nil {
		return x.PetId
	}
	return ""
}

func (x *BarragePushUserInItemPetInfoItem) GetPetElement() string {
	if x != nil {
		return x.PetElement
	}
	return ""
}

func (x *BarragePushUserInItemPetInfoItem) GetPetStatus() int64 {
	if x != nil {
		return x.PetStatus
	}
	return 0
}

func (x *BarragePushUserInItemPetInfoItem) GetToDoEndTime() int64 {
	if x != nil {
		return x.ToDoEndTime
	}
	return 0
}

var File_barrage_proto protoreflect.FileDescriptor

var file_barrage_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x09, 0x0a, 0x15,
	0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x70, 0x4d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x70, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66,
	0x6f, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x62, 0x75, 0x66, 0x66, 0x6f, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x6c, 0x4d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74,
	0x6f, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x07,
	0x70, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xb3, 0x01, 0x0a, 0x0b, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x65, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x65, 0x74, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x44,
	0x6f, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x6f, 0x44, 0x6f, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x98,
	0x01, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x65, 0x0a, 0x11, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x70, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x5b, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x6c, 0x0a,
	0x13, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x16, 0x42,
	0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x14, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6d,
	0x0a, 0x0f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a,
	0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x69, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x77,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x69, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x6e, 0x0a, 0x18, 0x43, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x43, 0x70, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x50, 0x0a,
	0x10, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22,
	0x9b, 0x03, 0x0a, 0x12, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x43, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x70, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd5, 0x0e,
	0x0a, 0x0f, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x66, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x47, 0x69, 0x66, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x66, 0x74, 0x12, 0x44, 0x0a,
	0x0b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4c, 0x69,
	0x6b, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x5d, 0x0a, 0x18, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x75, 0x69,
	0x74, 0x49, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x15, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x75, 0x69, 0x74, 0x49, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x6f,
	0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x44, 0x69, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x69, 0x73, 0x62, 0x61, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x61,
	0x6c, 0x6f, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x61, 0x6c, 0x6f, 0x12, 0x52, 0x0a, 0x14,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x43, 0x70, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x70, 0x52, 0x14, 0x66, 0x75, 0x6c, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x43, 0x70,
	0x12, 0x58, 0x0a, 0x17, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x4d, 0x61, 0x72, 0x72, 0x79, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43,
	0x70, 0x52, 0x17, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x4d, 0x61, 0x72, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x1a, 0x66, 0x75,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x53, 0x6f, 0x75, 0x6c, 0x4d, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x70, 0x52, 0x1a,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x53, 0x6f, 0x75, 0x6c, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x1d, 0x66, 0x75,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x42, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43,
	0x70, 0x52, 0x1d, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x42, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x12, 0x5c, 0x0a, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x43, 0x70, 0x52, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x68,
	0x0a, 0x1f, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x72, 0x79, 0x4e, 0x65,
	0x77, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x70, 0x52, 0x1f, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x72, 0x72, 0x79, 0x4e, 0x65, 0x77, 0x12, 0x60, 0x0a, 0x1b, 0x66, 0x75, 0x6c, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x44, 0x72,
	0x61, 0x77, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x70, 0x52, 0x1b, 0x66,
	0x75, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x44, 0x72, 0x61, 0x77, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x6e, 0x65,
	0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x16, 0x6e,
	0x65, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x54, 0x0a, 0x18, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x75, 0x69, 0x74, 0x49, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x64,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6b, 0x74, 0x6f, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_barrage_proto_rawDescOnce sync.Once
	file_barrage_proto_rawDescData = file_barrage_proto_rawDesc
)

func file_barrage_proto_rawDescGZIP() []byte {
	file_barrage_proto_rawDescOnce.Do(func() {
		file_barrage_proto_rawDescData = protoimpl.X.CompressGZIP(file_barrage_proto_rawDescData)
	})
	return file_barrage_proto_rawDescData
}

var file_barrage_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_barrage_proto_goTypes = []any{
	(*BarragePushUserInItem)(nil),            // 0: game.proto.BarragePushUserInItem
	(*Achievement)(nil),                      // 1: game.proto.achievement
	(*Friend)(nil),                           // 2: game.proto.Friend
	(*PackageItemDetail)(nil),                // 3: game.proto.PackageItemDetail
	(*UserInfoItem)(nil),                     // 4: game.proto.UserInfoItem
	(*BarragePushGiftItem)(nil),              // 5: game.proto.BarragePushGiftItem
	(*BarragePushContentItem)(nil),           // 6: game.proto.BarragePushContentItem
	(*BarragePushLikeItem)(nil),              // 7: game.proto.BarragePushLikeItem
	(*BarrageChangeSexItem)(nil),             // 8: game.proto.BarrageChangeSexItem
	(*BarrageTipsItem)(nil),                  // 9: game.proto.BarrageTipsItem
	(*SpecialEffectsItem)(nil),               // 10: game.proto.SpecialEffectsItem
	(*NewSpecialEffectsItem)(nil),            // 11: game.proto.NewSpecialEffectsItem
	(*CpSpecialEffectsResponse)(nil),         // 12: game.proto.CpSpecialEffectsResponse
	(*CpSpecialEffectsItem)(nil),             // 13: game.proto.CpSpecialEffectsItem
	(*FullServiceUsers)(nil),                 // 14: game.proto.FullServiceUsers
	(*FullServiceUsersCp)(nil),               // 15: game.proto.FullServiceUsersCp
	(*BarrageResponse)(nil),                  // 16: game.proto.BarrageResponse
	(*IndividualPoolSuitIdItem)(nil),         // 17: game.proto.IndividualPoolSuitIdItem
	(*BarragePushUserInItemPetInfoItem)(nil), // 18: game.proto.BarragePushUserInItem.petInfoItem
}
var file_barrage_proto_depIdxs = []int32{
	4,  // 0: game.proto.BarragePushUserInItem.soul_mates:type_name -> game.proto.UserInfoItem
	4,  // 1: game.proto.BarragePushUserInItem.best_friends:type_name -> game.proto.UserInfoItem
	3,  // 2: game.proto.BarragePushUserInItem.package_detail:type_name -> game.proto.PackageItemDetail
	2,  // 3: game.proto.BarragePushUserInItem.friends:type_name -> game.proto.Friend
	1,  // 4: game.proto.BarragePushUserInItem.achievement:type_name -> game.proto.achievement
	18, // 5: game.proto.BarragePushUserInItem.petInfo:type_name -> game.proto.BarragePushUserInItem.petInfoItem
	18, // 6: game.proto.BarragePushUserInItem.petList:type_name -> game.proto.BarragePushUserInItem.petInfoItem
	13, // 7: game.proto.CpSpecialEffectsResponse.SpecialEffectsItems:type_name -> game.proto.CpSpecialEffectsItem
	0,  // 8: game.proto.BarrageResponse.listUser:type_name -> game.proto.BarragePushUserInItem
	5,  // 9: game.proto.BarrageResponse.listGift:type_name -> game.proto.BarragePushGiftItem
	6,  // 10: game.proto.BarrageResponse.listContent:type_name -> game.proto.BarragePushContentItem
	7,  // 11: game.proto.BarrageResponse.listLike:type_name -> game.proto.BarragePushLikeItem
	8,  // 12: game.proto.BarrageResponse.listChangeSex:type_name -> game.proto.BarrageChangeSexItem
	17, // 13: game.proto.BarrageResponse.individual_pool_suit_ids:type_name -> game.proto.IndividualPoolSuitIdItem
	9,  // 14: game.proto.BarrageResponse.listTips:type_name -> game.proto.BarrageTipsItem
	10, // 15: game.proto.BarrageResponse.specialEffectsItems:type_name -> game.proto.SpecialEffectsItem
	14, // 16: game.proto.BarrageResponse.fullServiceUserIds:type_name -> game.proto.FullServiceUsers
	15, // 17: game.proto.BarrageResponse.fullServiceUserIdsCp:type_name -> game.proto.FullServiceUsersCp
	15, // 18: game.proto.BarrageResponse.fullServiceUserIdsMarry:type_name -> game.proto.FullServiceUsersCp
	15, // 19: game.proto.BarrageResponse.fullServiceUserIdsSoulMate:type_name -> game.proto.FullServiceUsersCp
	15, // 20: game.proto.BarrageResponse.fullServiceUserIdsBestFriends:type_name -> game.proto.FullServiceUsersCp
	15, // 21: game.proto.BarrageResponse.fullServiceUserIdsFriends:type_name -> game.proto.FullServiceUsersCp
	15, // 22: game.proto.BarrageResponse.fullServiceUserIdsOrderMarryNew:type_name -> game.proto.FullServiceUsersCp
	15, // 23: game.proto.BarrageResponse.fullServiceUserIdsDrawPrize:type_name -> game.proto.FullServiceUsersCp
	11, // 24: game.proto.BarrageResponse.newSpecialEffectsItems:type_name -> game.proto.NewSpecialEffectsItem
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_barrage_proto_init() }
func file_barrage_proto_init() {
	if File_barrage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_barrage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_barrage_proto_goTypes,
		DependencyIndexes: file_barrage_proto_depIdxs,
		MessageInfos:      file_barrage_proto_msgTypes,
	}.Build()
	File_barrage_proto = out.File
	file_barrage_proto_rawDesc = nil
	file_barrage_proto_goTypes = nil
	file_barrage_proto_depIdxs = nil
}
